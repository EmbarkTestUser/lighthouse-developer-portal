apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "backend.fullname" . }}
  labels:
    {{- include "backend.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "backend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
      labels:
        {{- include "backend.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: 
        {{ .Values.global.SERVICE_ACCOUNT }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}/{{ .Chart.Name }}:{{ .Values.global.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: {{ .Values.name }}
              containerPort: {{ .Values.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: {{ .Values.port }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: {{ .Values.port }}
          args: ["packages/backend", "--config", "app-config.yaml", "--config", "app-config.production.yaml"]
          env:
          - name: POSTGRES_SERVICE_HOST
            value: "$({{ .Values.global.DEPLOY_ENV | upper }}_POSTGRES_SERVICE_HOST)"
          - name: MEMCACHED_DNS
            value: "$({{ .Values.global.DEPLOY_ENV | upper }}_MEMCACHED_SERVICE_HOST)"
          envFrom:
          - configMapRef:
              name: "{{ .Values.global.DEPLOY_ENV }}-cm"
          - secretRef:
              name: "{{ .Values.global.DEPLOY_ENV }}-gh-secrets"
          - secretRef:
              name: "{{ .Values.global.DEPLOY_ENV }}-postgres-secrets"
          - secretRef:
              name: "{{ .Values.global.DEPLOY_ENV }}-memcached-secrets"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          - mountPath: /etc/app-config/
            name: gh-app-config
      volumes:
      - name: gh-app-config
        secret:
          secretName: gh-app-secrets
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
