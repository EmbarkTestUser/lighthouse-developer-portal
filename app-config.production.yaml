app:
  # Should be the same as backend.baseUrl when using the `app-backend` plugin
  title: DVP Developer Portal
  baseUrl: https://www.backhouselightstage.com

backend:
  baseUrl: https://www.backhouselightstage.com
  listen:
    port: 7000
  csp:
    connect-src: ["'self'", 'http:', 'https:']
  cors:
    origin: https://www.backhouselightstage.com
    methods: [GET, POST, PUT, DELETE]
    credentials: true
  cache:
   # TODO: update to use memcache in production  https://backstage.io/docs/overview/architecture-overview#cache
  store: memory
  database:
    # config options: https://node-postgres.com/api/client
    client: sqlite3
    connection: ':memory:'
    # client: pg
    # connection:
    #   host: ${POSTGRES_HOST}
    #   port: ${POSTGRES_PORT}
    #   user: ${POSTGRES_USER}
    #   password: ${POSTGRES_PASSWORD}
    # https://node-postgres.com/features/ssl
    #ssl: require # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
    #ca: # if you have a CA file and want to verify it you can uncomment this section
    #$file: <file-path>/ca/server.crt

integrations:
  github:
    - host: github.com
      token: ${GH_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  '/test':
    target: 'https://example.com'
    changeOrigin: true

auth:
  # providers: {}
  # see https://backstage.io/docs/tutorials/quickstart-app-auth to know more about enabling auth providers
  environment: production
  providers:
    github:
      production:
        clientId: ${GH_CLIENT_ID}
        clientSecret: ${GH_CLIENT_SECRET}

scaffolder:
  github:
    token: ${GH_TOKEN}
    visibility: public # or 'internal' or 'private'

catalog:
  processors:
    githubOrg:
      providers:
        - target: https://github.com
          apiBaseUrl: https://api.github.com
    visibility: public # or 'internal' or 'private'
  rules:
    - allow: [Component, System, API, Group, User, Template, Location]
  locations:
    #################### EBMARK #########################

    # app component
    - type: url
      target: https://github.com/department-of-veterans-affairs/lighthouse-backstage/blob/main/packages/app/catalog-info.yaml

    # backend component
    - type: url
      target: https://github.com/department-of-veterans-affairs/lighthouse-backstage/blob/main/packages/backend/catalog-info.yaml

    # feature-flags component
    - type: url
      target: https://github.com/department-of-veterans-affairs/lighthouse-backstage/blob/main/plugins/feature-flag-ui/catalog-info.yaml

    # system
    - type: url
      target: https://github.com/department-of-veterans-affairs/lighthouse-backstage/blob/main/catalog-info.yaml

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runin: 'docker'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

# builder: 'external' # Alternatives - 'external'
# publisher:
#   type: 'awsS3' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.
#   awsS3:
#     bucketName: ${TECHDOCS_S3_BUCKET_NAME}
#     region: ${AWS_REGION}
#     credentials:
#       accessKeyId: ${AWS_ACCESS_KEY_ID}
#       secretAccessKey: ${AWS_SECRET_ACCESS_KEY}
