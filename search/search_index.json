{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"example docs \u00b6 This is a basic example of documentation.","title":"Home"},{"location":"#example-docs","text":"This is a basic example of documentation.","title":"example docs"},{"location":"backstage-update/","text":"Automated Backstage Update \u00b6 Backstage Update Workflow file Update Backstage Workflow Jobs \u00b6 check-for-existing-update \u00b6 Description: Before upgrade process begins, this job checks if there is currently an open pull request to update backstage. Inputs: None Outputs: - exists - flag to check whether open PR currently exists - url - url to open pull request Steps: - Checkout - Uses: actions/checkout@v2 - Description: Checkout github repository so workflow can access it - Check for existing auto-update PR - Uses command line to make cURL request to GitHub API for all open pull requests using the \"auto-update-backstage\" branch - Stores url to open pull request as output link-pr \u00b6 Description: Inputs: If there is an open pull request to update backstage, this job will output a link to the open pull request Steps: update-backstage \u00b6 Description: If there is no open pull request to update backstage, this job will create a branch, perform the upgrade process, and create a pull request with the new changes. Steps:","title":"Automated Backstage Update"},{"location":"backstage-update/#automated-backstage-update","text":"Backstage Update Workflow file","title":"Automated Backstage Update"},{"location":"backstage-update/#update-backstage-workflow-jobs","text":"","title":"Update Backstage Workflow Jobs"},{"location":"backstage-update/#check-for-existing-update","text":"Description: Before upgrade process begins, this job checks if there is currently an open pull request to update backstage. Inputs: None Outputs: - exists - flag to check whether open PR currently exists - url - url to open pull request Steps: - Checkout - Uses: actions/checkout@v2 - Description: Checkout github repository so workflow can access it - Check for existing auto-update PR - Uses command line to make cURL request to GitHub API for all open pull requests using the \"auto-update-backstage\" branch - Stores url to open pull request as output","title":"check-for-existing-update"},{"location":"backstage-update/#link-pr","text":"Description: Inputs: If there is an open pull request to update backstage, this job will output a link to the open pull request Steps:","title":"link-pr"},{"location":"backstage-update/#update-backstage","text":"Description: If there is no open pull request to update backstage, this job will create a branch, perform the upgrade process, and create a pull request with the new changes. Steps:","title":"update-backstage"},{"location":"deployment/","text":"Automated workflows and infrastructure (WIP) \u00b6 This is a draft and does not represent current state. Application deployment \u00b6 TechDocs publication \u00b6 Jenkins environment variables \u00b6 Name Description TECHDOCS_S3_BUCKET_NAME AWS_ACCESS_KEY_ID AWS IAM user AWS_SECRET_ACCESS_KEY AWS_REGION Minimum IAM user access policy \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"VisualEditor0\", \"Effect\": \"Allow\", \"Action\": [ \"s3:PutObject\", ], \"Resource\": [ \"arn:aws:s3:::TECHDOCS_S3_BUCKET_NAME/*\", \"arn:aws:s3:::TECHDOCS_S3_BUCKET_NAME\" ] } ] } Backstage backend components \u00b6 Backstage backend container environment variables \u00b6 Name Description Privileges, permissions GITHUB_TOKEN GitHub Personal Access Token admin:org:read:org, user:read:user AUTH_GITHUB_CLIENT_ID GitHub OAuth AUTH_GITHUB_CLIENT_SECRET TECHDOCS_S3_BUCKET_NAME AWS_ACCESS_KEY_ID AWS IAM user AWS_SECRET_ACCESS_KEY AWS_REGION POSTGRES_USER PostgreSQL instance user SELECT, INSERT, UPDATE, DELETE, TRUNCATE, CREATE, CONNECT POSTGRES_HOST POSTGRES_PORT POSTGRES_PASSWORD Minimum IAM user policy \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"VisualEditor0\", \"Effect\": \"Allow\", \"Action\": [ \"s3:GetObject\", \"s3:ListBucket\" ], \"Resource\": [ \"arn:aws:s3:::TECHDOCS_S3_BUCKET_NAME/*\", \"arn:aws:s3:::TECHDOCS_S3_BUCKET_NAME\" ] } ] } Backstage frontend components \u00b6","title":"Deployment"},{"location":"deployment/#automated-workflows-and-infrastructure-wip","text":"This is a draft and does not represent current state.","title":"Automated workflows and infrastructure (WIP)"},{"location":"deployment/#application-deployment","text":"","title":"Application deployment"},{"location":"deployment/#techdocs-publication","text":"","title":"TechDocs publication"},{"location":"deployment/#jenkins-environment-variables","text":"Name Description TECHDOCS_S3_BUCKET_NAME AWS_ACCESS_KEY_ID AWS IAM user AWS_SECRET_ACCESS_KEY AWS_REGION","title":"Jenkins environment variables"},{"location":"deployment/#minimum-iam-user-access-policy","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"VisualEditor0\", \"Effect\": \"Allow\", \"Action\": [ \"s3:PutObject\", ], \"Resource\": [ \"arn:aws:s3:::TECHDOCS_S3_BUCKET_NAME/*\", \"arn:aws:s3:::TECHDOCS_S3_BUCKET_NAME\" ] } ] }","title":"Minimum IAM user access policy"},{"location":"deployment/#backstage-backend-components","text":"","title":"Backstage backend components"},{"location":"deployment/#backstage-backend-container-environment-variables","text":"Name Description Privileges, permissions GITHUB_TOKEN GitHub Personal Access Token admin:org:read:org, user:read:user AUTH_GITHUB_CLIENT_ID GitHub OAuth AUTH_GITHUB_CLIENT_SECRET TECHDOCS_S3_BUCKET_NAME AWS_ACCESS_KEY_ID AWS IAM user AWS_SECRET_ACCESS_KEY AWS_REGION POSTGRES_USER PostgreSQL instance user SELECT, INSERT, UPDATE, DELETE, TRUNCATE, CREATE, CONNECT POSTGRES_HOST POSTGRES_PORT POSTGRES_PASSWORD","title":"Backstage backend container environment variables"},{"location":"deployment/#minimum-iam-user-policy","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"VisualEditor0\", \"Effect\": \"Allow\", \"Action\": [ \"s3:GetObject\", \"s3:ListBucket\" ], \"Resource\": [ \"arn:aws:s3:::TECHDOCS_S3_BUCKET_NAME/*\", \"arn:aws:s3:::TECHDOCS_S3_BUCKET_NAME\" ] } ] }","title":"Minimum IAM user policy"},{"location":"deployment/#backstage-frontend-components","text":"","title":"Backstage frontend components"},{"location":"running-locally/","text":"Open a Codespace (preferred- work in progress) \u00b6 This repo is configured to run a production-like environment in a GitHub Codespace . Open a Codespace Run application: 1 yarn dev Install and run locally with Docker (work in progress) \u00b6 Prerequisites Install git Install Docker Desktop: Mac , Windows Run 1 sh local.sh start After the application runs for the first time, copy node_modules . While the application is running, run this is a separate terminal: 1 sh local.sh copy Caveats - What does this do : This will install the application and its dependencies and then run the backend and frontend in the same container. To ensure fast hot-reloading, node_modules and postgreSQL db are stored in a docker volume and your local source files are mounted into the container. - Why do you need to copy after the first run : The application uses node_modules from Docker volume not your local files. Copy these locally so that dependencies resolve correctly in your editor. Install and run locally (TBD) \u00b6 Use nvm to install node You will need to update the Backstage configuration for running locally. Update these instructions if you try this out. app-config.yaml is used for Codespaces and it is merged with app-config.production.yaml in production environments. Supporting Codespaces is the priorty so consider that when changing the way configurations are organized.","title":"Running Locally"},{"location":"running-locally/#open-a-codespace-preferred-work-in-progress","text":"This repo is configured to run a production-like environment in a GitHub Codespace . Open a Codespace Run application: 1 yarn dev","title":"Open a Codespace (preferred- work in progress)"},{"location":"running-locally/#install-and-run-locally-with-docker-work-in-progress","text":"Prerequisites Install git Install Docker Desktop: Mac , Windows Run 1 sh local.sh start After the application runs for the first time, copy node_modules . While the application is running, run this is a separate terminal: 1 sh local.sh copy Caveats - What does this do : This will install the application and its dependencies and then run the backend and frontend in the same container. To ensure fast hot-reloading, node_modules and postgreSQL db are stored in a docker volume and your local source files are mounted into the container. - Why do you need to copy after the first run : The application uses node_modules from Docker volume not your local files. Copy these locally so that dependencies resolve correctly in your editor.","title":"Install and run locally with Docker (work in progress)"},{"location":"running-locally/#install-and-run-locally-tbd","text":"Use nvm to install node You will need to update the Backstage configuration for running locally. Update these instructions if you try this out. app-config.yaml is used for Codespaces and it is merged with app-config.production.yaml in production environments. Supporting Codespaces is the priorty so consider that when changing the way configurations are organized.","title":"Install and run locally (TBD)"}]}