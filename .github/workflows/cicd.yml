name: CI/CD Workflow
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
jobs:
  unit-tests:
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      artifact_name: ${{ steps.unit-tests.outputs.artifact_name }}
      matrix: ${{ steps.unit-tests.outputs.matrix_string }}
    steps:
      - uses: actions/checkout@v3
      - name: Unit tests
        id: unit-tests
        uses: ./.github/actions/unit-tests
  check-test-coverage:
    runs-on: ubuntu-latest
    needs: [unit-tests]
    strategy:
      matrix:
        packages: ${{ fromJson(needs.unit-tests.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - name: Check coverage for ${{ matrix.packages }}
        if: matrix.packages != 'backend'
        uses: ./.github/actions/check-code-coverage
        with:
          artifact_name: ${{ needs.unit-tests.outputs.artifact_name }}
          dir: ${{ matrix.packages }}
  pre-build-validation:
    needs: [unit-tests]
    uses: department-of-veterans-affairs/lighthouse-developer-portal/.github/workflows/pre-build-validation.yml@main
    with:
      UNIT_TEST_STATUS: ${{ needs.unit-tests.result }}
    secrets:
      SLACK_UID_001: ${{ secrets.SLACK_UID_ABDUSAMAD }}
      SLACK_UID_002: ${{ secrets.SLACK_UID_LOVENDAHL }}
      SLACK_UID_003: ${{ secrets.SLACK_UID_LUCKEY }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
  browser-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser-name: [electron, chrome, edge]
    steps:
    - uses: actions/checkout@v3
    - name: Cypress browser tests
      uses: ./.github/actions/browser-tests
      with:
        browser-name: ${{ matrix.browser-name }}
  build-push-images:
    runs-on: ubuntu-latest
    needs: [pre-build-validation]
    outputs:
      build-artifacts: ${{ steps.build.outputs.build-artifacts }}
    if: |
      github.ref == 'refs/heads/main' ||
      github.event_name == 'workflow_dispatch'
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        type: [backend, frontend]
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/install-dependencies
      - name: Build and push image
        id: build
        uses: ./.github/actions/build-push-images
        with:
          type: ${{ matrix.type }}
          token: ${{ secrets.GITHUB_TOKEN }}
          owner: ${{ github.repository_owner }}
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
  deploy-app-dev:
    runs-on: ubuntu-latest
    needs: [build-push-images]
    if: |
      github.ref == 'refs/heads/main'
    environment:
      name: Development
    permissions:
      packages: read
      contents: read
    # Need to periodically update K8s context
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get latest tag
        id: main
        run: |
          echo "::set-output name=VERSION::$(git tag -l --sort=-version:refname | head -1)"
      - name: Deploy app
        uses: ./.github/actions/deploy-backstage-app
        with:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
          DOCKERCONFIGJSON: ${{ secrets.DOCKERCONFIGJSON }}
          BACKEND_SECRET: ${{ secrets.BACKEND_SECRET }}
          GH_CLIENT_ID: ${{ secrets.GH_OAUTH_CLIENT_ID }}
          GH_CLIENT_SECRET: ${{ secrets.GH_OAUTH_CLIENT_SECRET }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          ENV: "dev"
          VERSION: ${{ steps.main.outputs.VERSION }}
          POSTGRES_USER: ${{ secrets.PG_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASSWORD }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
          DOCSERVER_BASE_URL: ${{ secrets.DOCSERVER_BASE_URL }}
          APP_CREDS_YAML: ${{ secrets.APP_CREDS_YAML }}
          MEMCACHED_USER: ${{ secrets.MEMCACHED_USER }}
          MEMCACHED_PASSWORD: ${{ secrets.MEMCACHED_PASSWORD }}
  notify-deployment-repo:
    runs-on: ubuntu-latest
    needs: [deploy-app-dev]
    # Notify lighthouse-developer-portal-deployment via webhook https://github.com/department-of-veterans-affairs/lighthouse-developer-portal-deployment
    steps:
      - uses: actions/checkout@v3
      - name: Send deployment event via webhook
        uses: ./.github/actions/send-deployment-webhook
        with:
          ENV: "dev"
          WEBHOOK_DEPLOY_PAT: ${{ secrets.WEBHOOK_DEPLOY_PAT }}
          MAIN_SHA: ${{ github.sha }}
