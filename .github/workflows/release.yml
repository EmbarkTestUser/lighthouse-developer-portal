# From https://github.com/changesets/action#example-workflow
name: Release

on:
  push:
    branches:
      - main
      - changesets
    tags:
      - "v*"
  workflow_dispatch:

env:
  IMAGE_NAME: lighthouse-backstage

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        type: [backend, frontend]

    steps:
      - uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      # This is the a separate action that sets up buildx runner
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # So now you can use Actions' own caching!
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:      
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
      # And make it available for the builds
      - name: Build and push ${{ matrix.type }} image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile.${{ matrix.type }}
          load: true
          tags: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/${{ matrix.type }}:changesets
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      # - name: Log in to registry
      #   # This is where you will update the PAT to GITHUB_TOKEN
      #   run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      # - name: Build images
      #   if: ${{ matrix.type == 'backend' }} 
      #   run: |
      #     yarn install --frozen-lockfile && yarn tsc
      #     yarn build && docker build . -f Dockerfile --tag $IMAGE_NAME/backend --label "runnumber=${GITHUB_RUN_ID}"

      # - name: Build frontend image
      #   if: ${{ matrix.type == 'frontend' }}
      #   run: docker build . -f Dockerfile.dockerbuild --tag $IMAGE_NAME/frontend --label "runnumber=${GITHUB_RUN_ID}"
      

      - name: Push images
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/${{ matrix.type }}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/${{ matrix.type }} $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION



        # This ugly bit is necessary if you don't want your cache to grow forever
        # till it hits GitHub's limit of 5GB.
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache 
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      
    
        # docker tag ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/${{ matrix.type }} $IMAGE_ID:changesets
        # docker push $IMAGE_ID:changesets
        
          
      

        # run: |
        #   IMAGE_ID_FRONTEND=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/frontend
        #   IMAGE_ID_BACKEND=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/backend
      
        #   IMAGE_ID_FRONTEND=$(echo $IMAGE_ID_FRONTEND | tr '[A-Z]' '[a-z]')
        #   IMAGE_ID_BACKEND=$(echo $IMAGE_ID_BACKEND | tr '[A-Z]' '[a-z]')
          
        #   VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        
        #   [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        #   # Use Docker `latest` tag convention
        #   [ "$VERSION" == "main" ] && VERSION=latest
        #   echo IMAGE_ID_FRONTEND=$IMAGE_ID_FRONTEND
        #   echo IMAGE_ID_BACKEND=$IMAGE_ID_BACKEND
        #   echo VERSION=$VERSION
        #   docker tag ${{ env.IMAGE_NAME }}/frontend $IMAGE_ID_FRONTEND:$VERSION
        #   docker tag ${{ env.IMAGE_NAME }}/backend $IMAGE_ID_BACKEND:$VERSION
        #   docker push $IMAGE_ID_FRONTEND:$VERSION
        #   docker push $IMAGE_ID_BACKEND:$VERSION

  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Setup Node.js 12.x
        uses: actions/setup-node@master
        with:
          node-version: 12.x
      - name: Install Dependencies
        run: yarn install
      - name: Generate changelogs
        run: yarn run version
      - name: Build & test
        run: | 
          echo "Building and testing..."
      # - uses: "marvinpinto/action-automatic-releases@latest"
      #   with:
      #     repo_token: "${{ secrets.GITHUB_TOKEN }}"
      #     automatic_release_tag: latest
      #     prerelease: false
      #     files: |
      #       LICENSE.txt
      #       *.jar
      - name: Create Release Pull Request
        uses: changesets/action@master
        with:
          version: yarn version
          title: Test PR for Release
          commit: Test commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
