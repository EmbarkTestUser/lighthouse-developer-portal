name: 'Deploy Backstage app'
description: 'Deploys Backstage application to an environment using helm'
inputs:
  KUBE_CONFIG: 
    description: 'Kubernetes context'
    required: true
  DOCKERCONFIGJSON:
    description: 'Authentication for pulling from image registry'
    required: true
  GH_TOKEN:  
    description: 'Base64 encoded github token'
    required: true
  GH_CLIENT_ID:
    description: 'OAuth client ID'
    required: true
  GH_CLIENT_SECRET:
    description: 'OAuth client secret'
    required: true
  ENV:
    description: 'Flag used to set environment variable overrides'
    required: true
  POSTGRES_USER:
    description: 'Username for postgres database'
    required: true
  POSTGRES_PASSWORD:
    description: 'Password for postgres database'
    required: true
  AWS_BUCKET_NAME:
    description: 'AWS bucket name'
    required: true
  AWS_REGION:
    description: 'AWS region'
    required: true
  AWS_ROLE_ARN:
    description: 'AWS Role Arn'
    required: true

runs:
  using: "composite"
  steps:
  - name: Set K8s context
    uses: azure/k8s-set-context@v1
    with:
      method: kubeconfig
      kubeconfig: ${{ inputs.KUBE_CONFIG }}
  - name: Set env overrides 
    id: overrides
    run: |
      echo "::set-output name=nonprod::true"
      echo "::set-output name=BASE_URL::http://internal-a4d95ec490108442a940e05e10d9e3d7-665278146.us-gov-west-1.elb.amazonaws.com"
      echo "::set-output name=HOST::internal-a4d95ec490108442a940e05e10d9e3d7-665278146.us-gov-west-1.elb.amazonaws.com"
      echo "::set-output name=GATEWAY::istio-system/ldx-nonprod-dev-gateway"
    shell: bash
  - name: Create image tag
    id: tag
    run: |
      prefix="sha-"
      prefix+=${{ github.sha }}
      echo "::set-output name=sha::$prefix"
    shell: bash
  - name: Upgrade(or install) helm release
    run: >
      helm upgrade lighthouse-embark-${{ inputs.ENV }} helm/embark/ 
      --debug 
      --values helm/embark/values.yaml 
      --namespace lighthouse-bandicoot-dev 
      --set DOCKERCONFIGJSON=${{ inputs.DOCKERCONFIGJSON }} 
      --set GH_TOKEN=${{ inputs.GH_TOKEN }} 
      --set GH_CLIENT_ID=${{ inputs.GH_CLIENT_ID }} 
      --set GH_CLIENT_SECRET=${{ inputs.GH_CLIENT_SECRET }} 
      --set nonprod=${{ steps.overrides.outputs.nonprod }},backend.nonprod=${{ steps.overrides.outputs.nonprod }},frontend.nonprod=${{ steps.overrides.outputs.nonprod }} 
      --set BASE_URL=${{ steps.overrides.outputs.BASE_URL }} 
      --set HOST=${{ steps.overrides.outputs.HOST }} 
      --set GATEWAY=${{ steps.overrides.outputs.GATEWAY }} 
      --set DEPLOY_ENV=${{ inputs.ENV }},backend.DEPLOY_ENV=${{ inputs.ENV }} 
      --set backend.image.tag=${{ steps.tag.outputs.sha }},frontend.image.tag=${{ steps.tag.outputs.sha }} 
      --set POSTGRES_USER=${{ inputs.POSTGRES_USER }},backend.POSTGRES_USER=${{ inputs.POSTGRES_USER }} 
      --set POSTGRES_PASSWORD=${{ inputs.POSTGRES_PASSWORD }},backend.POSTGRES_PASSWORD=${{ inputs.POSTGRES_PASSWORD }} 
      --set AWS_BUCKET_NAME=${{ inputs.AWS_BUCKET_NAME }},backend.AWS_BUCKET_NAME=${{ inputs.AWS_BUCKET_NAME }}
      --set AWS_REGION=${{ inputs.AWS_REGION }},backend.AWS_REGION=${{ inputs.AWS_REGION }} 
      --set AWS_ROLE_ARN=${{ inputs.AWS_ROLE_ARN }},backend.AWS_ROLE_ARN=${{ inputs.AWS_ROLE_ARN }}
      --install 
      --atomic 
      --cleanup-on-fail 
      --history-max 5
    shell: bash
