name: 'Build and Push Images'
description: 'Builds and pushes image to GitHub Packages'
inputs:
  type:
    description: 'Type of image being built (FE / BE)'
    required: true
  token:  
    description: 'github token'
    required: true
    default: ${{ github.token }}
  owner:
    description: 'repository owner for container registry'
    required: true
    default: 'department-of-veterans-affairs'

runs:
  using: "composite"
  steps:
  - name: Set up QEMU
    uses: docker/setup-qemu-action@v1
  - name: Set up Docker Buildx
    id: buildx
    uses: docker/setup-buildx-action@v1.6.0
    with:
      buildkitd-flags: --debug
      config-inline: |
        [registry."docker.io"]
          mirrors = ["mirror.gcr.io"]
  - name: Cache frontend static files
    id: cache-static
    uses: actions/cache@v2
    with:
      path: |
        **/packages/app/dist
      key: |
        ${{ runner.os }}-app-v3-static-${{ hashFiles('**/packages/app') }}-${{ hashFiles('**/app-config.*.yaml') }}
  - name: Create build assets
    run: |
      yarn tsc
      if [[ "${{ inputs.type }}" == "frontend" ]]; then
        if [[ "${{ steps.cache-static.outputs.cache-hit }}" = "true" ]]; then
          if [[ -d "/packages/app/dist" ]]; then
            echo "Cache hit - skipping build assets"; else
            yarn run "build frontend"
          fi; else
          yarn run "build frontend"
        fi
      else
        yarn run "build backend"
      fi
    shell: bash
  - name: Login to ghcr
    uses: docker/login-action@v1
    with:
      registry: ghcr.io
      username: ${{ inputs.owner }}
      password: ${{ inputs.token }}
  - name: Extract metadata (tags, labels) for Docker
    id: meta
    uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
    with:
      images: ghcr.io/${{ inputs.owner }}/lighthouse-backstage/${{ inputs.type }}
  - name: Build and push image
    uses: docker/build-push-action@v2.7.0
    with:
      context: .
      file: Dockerfile.${{ inputs.type }}
      push: true
      platforms: linux/amd64
      tags: ghcr.io/${{ inputs.owner }}/lighthouse-backstage/${{ inputs.type }}:latest
      cache-from: type=gha, scope=${{ inputs.type }}
      cache-to: type=gha, scope=${{ inputs.type }}, mode=max
      secrets: |
        GIT_AUTH_TOKEN=${{ inputs.token }}
  