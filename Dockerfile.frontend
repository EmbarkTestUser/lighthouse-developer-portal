# The purpose of this image is to serve the frontend app content separately.
# By default the Backstage backend uses the app-backend plugin to serve the
# app from the backend itself, but it may be desirable to move the frontend
# content serving to a separate deployment, in which case this image can be
# used.

# This dockerfile also performs the build first inside docker. This may come
# with a build time impact, but is sometimes desirable.

# USAGE:
#
# - Update the copy of this file to add configuration arguments to the "build"
#   command, for example:
#
#       RUN yarn workspace app build --config <config1> --config <config2> ...
#
# - In your project root, run:
#
#       docker build -t backstage-frontend -f Dockerfile.dockerbuild .
FROM node:14-buster-slim AS packages

WORKDIR /app
COPY package.json yarn.lock ./

COPY packages packages
COPY plugins plugins

RUN find packages \! -name "package.json" -mindepth 2 -maxdepth 2 -exec rm -rf {} \+

# Stage 2 - Install dependencies and build packages
FROM node:14-buster-slim AS build

COPY --from=packages /app .
WORKDIR /app

RUN yarn install --frozen-lockfile --network-timeout 600000 && rm -rf "$(yarn cache dir)"

COPY . .

RUN yarn tsc
# Why do we need this for the back end?
# RUN yarn --cwd packages/backend backstage-cli backend:bundle --build-dependencies


# FROM node:14-buster 
# # RUN mkdir /app
# COPY --from=build /app .

# # RUN mkdir /app
# # COPY . /app
# WORKDIR /app

RUN yarn install --frozen-lockfile
COPY . .

RUN yarn workspace app build
COPY . .

FROM nginx:mainline

RUN apt-get update && apt-get -y install jq && rm -rf /var/lib/apt/lists/*

COPY . .

COPY --from=build /app/packages/app/dist /usr/share/nginx/html
COPY docker/default.conf.template /etc/nginx/templates/default.conf.template

COPY docker/inject-config.sh /docker-entrypoint.d/40-inject-config.sh

ENV PORT 3000